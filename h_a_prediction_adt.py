# -*- coding: utf-8 -*-
"""H_A_Prediction_ADT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0gH7Az2Q0vgwwkxKlL8jfqgP6n6XknX
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import pickle
import os
import joblib
from sklearn.metrics import RocCurveDisplay
# %matplotlib inline



from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv("heart.csv")

dataset.shape

dataset.sample(5)

dataset.describe()

dataset.info()

info = ["age","1: male, 0: female","chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic","resting blood pressure"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved","exercise induced angina","ST depression induced by exercise relative to rest","the slope of the peak exercise ST segment","number of major vessels (0-3) colored by flourosopy","3 = normal; 6 = fixed defect; 7 = reversable defect"]



for i in range(len(info)):
    print(dataset.columns[i]+":\t\t\t"+info[i])

dataset["target"].unique()

print(dataset.corr()["target"].abs().sort_values(ascending=False))

y = dataset["target"]

sns.countplot(y)


target_temp = dataset.target.value_counts()

print(target_temp)

print("Percentage of patience without heart problems: "+str(round(target_temp[0]*100/303,2)))
print("Percentage of patience with heart problems: "+str(round(target_temp[1]*100/303,2)))

dataset.hist(figsize=(20,20))
plt.show()

from sklearn.model_selection import train_test_split

predictors = dataset.drop("target",axis=1)
target = dataset["target"]

X_train,X_test,Y_train,Y_test = train_test_split(predictors,target,test_size=0.20,random_state=0)

"""X_train.shape"""

dataset

Y_train.shape

X_test

from sklearn.metrics import accuracy_score

from sklearn.ensemble import RandomForestClassifier

max_accuracy = 0


for x in range(2000):
    rf = RandomForestClassifier(random_state=x)
    rf.fit(X_train,Y_train)
    Y_pred_rf = rf.predict(X_test)
    current_accuracy = round(accuracy_score(Y_pred_rf,Y_test)*100,2)
    if(current_accuracy>max_accuracy):
        max_accuracy = current_accuracy
        best_x = x
        
#print(max_accuracy)
#print(best_x)

rf = RandomForestClassifier(random_state=best_x)
rf.fit(X_train,Y_train)
Y_pred_rf = rf.predict(X_test)

score_rf = round(accuracy_score(Y_pred_rf,Y_test)*100,2)

print("The accuracy score achieved using Random Forest is: "+str(score_rf)+" %")

svc_disp = RocCurveDisplay.from_estimator(rf, X_test, Y_test)
plt.show()

dataset

'''customdata = np.array([[63, 1, 3, 160, 300, 1, 0, 200, 0, 2.3, 0, 0, 1]])
Y_pred_rf = rf.predict(customdata)
print(Y_pred_rf[0])
print(Y_pred_rf)'''

print(os.path.dirname(os.path.realpath('__file__')))
root = os.path.dirname(os.path.realpath('__file__'))

model_path = os.path.join(root, 'rfc.sav')
joblib.dump(rf, model_path)

